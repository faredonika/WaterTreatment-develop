@model WaterTreatment.Web.Models.UserEditModel
@{
    ViewBag.Title = "Edit User";
}
<div class="container-fluid" id="createPage" style="display: none;" data-bind="visible: true">
    @using (Html.BeginForm("EditUser", "User", new { }, FormMethod.Post, new { @class = "form-horizontal", id = "createForm" }))
    {
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.AntiForgeryToken()
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label>Username</label>
            </div>
            <div class="col-md-10" data-bind="validationElement: name">
                @Html.TextBoxFor(m => m.Username, new { @class = "form-control", data_bind = "textInput: name" })
                @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label>First Name</label>
            </div>
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", data_bind = "textInput: firstName" })
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label>Last Name</label>
            </div>
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", data_bind = "textInput: lastName" })
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                @Html.LabelFor(m => m.Email)
            </div>
            <div class="col-md-10" data-bind="validationElement: email">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", data_bind = "textInput: email" })
                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                @Html.LabelFor(m => m.Password)
            </div>
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label class="control-label">Role</label>
            </div>
            <div class="col-md-10">
                <select class="form-control" name="RoleId" data-bind="options: roles, value: roleId, optionsText: 'Name', optionsValue: 'Id'"></select>
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label class="control-label">Vendor</label>
            </div>
            <div class="col-md-10" data-bind="validationElement: vendorId">
                <select class="form-control" name="VendorId" data-bind="options: vendors, value: vendorId, optionsText: 'Name', optionsValue: 'Id', optionsCaption: 'Unassigned'"></select>
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label class="control-label">Location</label>
            </div>
            <div class="col-md-5">
                <select class="form-control" id="lstSelectState" name="selectedState" data-bind="options: UsStates, value: selectedState, optionsCaption: 'Select a State...'"></select>
            </div>
            <div class="col-md-5">
                <label class="control-label">International User</label>  @Html.CheckBoxFor(m => m.IsInternational, new { @class = "checkbox-inline", id = "chkInternational", data_bind = "checked: isInternational, click:TestCheck" })
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label class="control-label">Access</label>
            </div>
            <div class="col-md-10" style="padding-top: 0.4em">
                <button type="button" id="selectAll" data-bind="click: selectAll">Select All Sites</button>
                &nbsp &nbsp
                <button type="button" id="unSelectAll" data-bind="click: unSelectAll">Unselect All Sites</button>
                <br />

                <input type="hidden" name="SiteList" data-bind="value: siteList" />
                <input type="hidden" name="SystemList" data-bind="value: systemList" />
                <div id="accessTree"></div>
            </div>
        </div>
        <div class="row" style="padding-bottom: 1.0em">
            <div class="col-md-2" style="padding-top: 0.4em">
                <label class="control-label">Status</label>
            </div>
            <div class="col-md-10" style="padding-top: 0.4em">
                <div class="row">
                    <div class="col-md-2" style="padding-top: 0.4em;">
                        <span data-bind="text: statusDisplay"></span>
                    </div>
                    <div class="col-md-2 checkbox">
                        <label data-bind="visible: isActive"><input data-bind="checked: deactivated" type="checkbox" />Deactivate?</label>
                        <input id="isActive" name="IsActive" type="hidden" data-bind="value: !deactivated() && isActive" />
                    </div>
                    <div class="col-md-2 checkbox">
                        <label data-bind="visible: isActive && isLocked && !deactivated()"><input data-bind="checked: unlocked" type="checkbox" />Unlock?</label>
                        <input id="isLocked" name="IsLocked" type="hidden" data-bind="value: isLocked && isActive && !unlocked() && !deactivated()" />
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 pull-right">
                <button type="button" class="btn btn-default pull-right" data-bind="enable: canSave, click: save">Save</button>
            </div>
        </div>
    }
</div>
@section Scripts
{
<script type="text/javascript">
require(['jquery', 'knockout', 'App/ViewModels/User/createEdit', 'jsTree3/jstree'], function ($, ko, vm) {
    var initialState = @Html.Raw(Json.Encode(Model)),
        tree = @Html.Raw(ViewBag.AccessTree);

    initialState.includeInvitation = false;

    var $access = $('#accessTree');

    $access.jstree({
        "core": {
            "data": tree,
            "themes": {
                "dots": false,
                "icons": false
            }
        },
        "plugins": ["themes", "checkbox"]
    });

    $access.on('loaded.jstree', function() {
        var tree = $('#accessTree').jstree(true);

        if (initialState) {
            var siteIds = initialState.SiteList.split(','),
                systemIds = initialState.SystemList.split(',');

            systemIds.forEach(function (id) {
                tree.select_node('T-' + id);
            });

            siteIds = siteIds.map(function (id) {
                return 'S-' + id;
            });

            var systems = tree.get_bottom_selected();

            $(systems).each(function (index, system) {
                var building = tree.get_parent(system);
                var site = tree.get_parent(building);
                
                var i = siteIds.indexOf(site);
                if (i !== -1) {
                    siteIds.splice(i, 1);
                }
            })

            siteIds.forEach(function (id) {
                tree.select_node(id);
            });
        }
    });
    ko.applyBindingsWithValidation(new vm(@Html.Raw(ViewBag.Roles), @Html.Raw(ViewBag.Vendors), initialState), $('#createPage')[0], {
        errorMessageClass: "text-danger",
        decorateInputElement: true,
        errorElementClass: 'has-error'
    });
});
</script>
}